
*    BASED ON SBC-85 UTILITIES WRITTEN BY CRAIG ANDREWS, 2020
*    COPYRIGHT 2019 (C) OF CRAIG ANDREWS ALL RIGHTS RESERVED

* FUNCTION: SENDS PATTERN IN REGISTER A TO SERIAL PORT IN BINARY ASCII
BOB	PUSH	PSW
	CALL	BON		* OUTPUT HIGH NIBBLE
	CALL	SENDSPC
	RLC			* MOVE LOW NIBBLE TO TOP
	RLC
	RLC
	RLC
	CALL	BON		* OUTPUT LOW NIBBLE
	POP	PSW
	RET

*  FUNCTION: SENDS MOST SIGNIFICANT PATTERN IN REGISTER A TO SERIAL PORT IN BINARY ASCII

BON	PUSH	PSW
	PUSH	B		* SAVE BC PAIR, PUT COUNTER IN B, CHAR IN C
	MOV	C,A		* SAVE PATTERN IN C
	MVI	B,04H		* NUMBER OF BITS TO SEND OUT

BON1	MOV	A,C		* GET PATTERN
	RLC			* ROTATE MSBIT INTO CARRY
	MOV	C,A		* SAVE PATTERN
	MVI	A,'1'		* PRELOAD 1
	JC	BON2		* SKIP NEXT IF GUESSED RIGHT
	MVI	A,'0'		* CHANGE IF GUESSED WRONG

BON2	CALL	CO		* OUTPUT
	DCR	B
	JNZ	BON1		* LOOP UNTIL DONE
	POP	B
	POP	PSW
	RET			* DONE WITH NIBBLE

*  FUNCTION: TRANSMITS A CHARACTER OUT THE SERIAL PORT
CO      SCALL   .SCOUT
        RET

*  FUNCTION: WAITS UNTIL A CHARACTER IS ENTERED AT THE SERIAL PORT

CI      SCALL   .SCIN
        JC      CI
	CPI	1BH		;Did user hit "Q" ?
	JZ	QUIT		; ... then quit	
        RET

*  FUNCTION: RECEIVES A 2 OR 4 DIGIT HEX VALUE FROM USER

GETHEXW EQU     *		;GET 4 DIGIT ADDRESS FROM USER, LEAVE IN HL
	CALL	CI	
	CPI	CR		;IS IT A CARRIAGE RETURN
	RZ			;IF SO, RETURN EARLY WITH FLAG ZERO
	CALL	CO
	CALL	TOHEX		;CONVERT FROM ASCII TO HEX
	JNC	GHW05		;IF INPUT WAS OK, CONTINUE
	CALL	BADHEX		;OTHERWISE, TRY AGAIN
	JMP	GETHEXW
GHW05	RLC			;SHIFT UP TO HIGH NIBBLE
	RLC
	RLC
	RLC
	MOV	H,A		;MSB, PUT INTO H
GHW10	CALL	CI
	CPI	CR		;IS IT A CARRIAGE RETURN
	RZ			;IF SO, RETURN EARLY WITH FLAG ZERO
	CALL	CO
	CALL	TOHEX		;CONVERT FROM ASCII TO HEX
	JNC	GHW15		;IF INPUT WAS OK, CONTINUE
	CALL	BADHEX		;OTHERWISE, TRY AGAIN
	JMP	GHW10
GHW15	ORA	H		;COMBINE WITH HIGH NIBBLE
	MOV	H,A		;HIGH BYTE IS DONE

GETHEXB EQU     *		;ENTER HERE TO JUST GET 2 DIGIT HEX
GHW20	CALL	CI
	CPI	CR		;IS IT A CARRIAGE RETURN
	RZ			;IF SO, RETURN EARLY WITH FLAG ZERO
	CALL	CO		;ECHO CHARACTER TO TERMINAL
	CALL	TOHEX		;CONVERT FROM ASCII TO HEX
	JNC	GHW25		;IF INPUT WAS OK, CONTINUE
	CALL	BADHEX		;OTHERWISE, TRY AGAIN
	JMP	GETHEXB
GHW25	RLC			;SHIFT UP TO HIGH NIBBLE
	RLC
	RLC
	RLC
	MOV	L,A		;PUT INTO L
GETHEXN EQU     *
GHW30	CALL	CI
	CPI	CR		;IS IT A CARRIAGE RETURN
	RZ			;IF SO, RETURN EARLY WITH FLAG ZERO
	CALL	CO		;ECHO CHARACTER TO USER
	CALL	TOHEX		;CONVERT FROM ASCII TO HEX
	JNC	GHW35		;IF INPUT WAS OK, CONTINUE
	CALL	BADHEX		;OTHERWISE, TRY AGAIN
	JMP	GHW30
GHW35	ORA	L		;COMBINE WITH HIGH NIBBLE
	MOV	L,A		;LOW BYTE IS DONE
	ORI	01H		;CLEAR THE ZERO FLAG, MEANS VALID VALUE
	MOV	A,L		;RETURNED VALUE IN L, DUPLICATE IN ACC.
	RET

BADHEX	MVI	A,BELL		;SEND BELL
	CALL	CO
	MVI	A,BS		;SEND BACKSPACE
	CALL	CO
	RET


*  FUNCTION: SENDS BYTE VALUE IN REGISTER A TO TERMINAL IN HEXADECIMAL
HO	PUSH	PSW		* SAVE CHARACTER FOR LOW NIBBLE
	CALL	TOASCIH         * CONVERT HIGH NIBBLE TO ASCII
	CALL	CO		* OUTPUT
	POP	PSW		* POP CHARACTER
HOL	PUSH	PSW		* ENTER HERE FOR ONLY LOW NIBBLE
	CALL	TOASCIL         * CONVERT LOW NIBBLE TO ASCII
	CALL	CO		* OUTPUT TO CONSOLE
	POP	PSW		* RESTORE PSW
	RET

*  FUNCTION: SENDS A NEWLINE (CR, LF) TO THE DISPLAY VIA SERIAL PORT
NEWLINE	PUSH	PSW
	MVI	A,0AH
	CALL	CO
	POP	PSW
	RET

*  FUNCTION: SENDS A NEWLINE AND THEN A PROMPT TO THE SERIAL PORT
PROMPT	CALL	NEWLINE
	MVI	A,'>'
	CALL	CO
	RET

*  FUNCTION: SENDS THE DE PAIR TO THE DISPLAY AS FOUR HEX ASCII CHARACTERS
SENDDE	MOV	A,D
	CALL	HO		* HEX OUTPUT
	MOV	A,E		* NOW DO E
	CALL	HO
	RET

*  FUNCTION: SENDS THE HL PAIR TO THE DISPLAY AS FOUR HEX ASCII CHARACTERS
SENDHL	MOV	A,H
	CALL	HO
	MOV	A,L		* NOW DO L
	CALL	HO
	RET

*  FUNCTION: SENDS A SPACE OUT THE SERIAL PORT
SENDSPC	PUSH	PSW
	MVI	A,SPACE
	CALL	CO		* OUTPUT CHARACTER
	POP	PSW
	RET

SENDSTR SCALL   .PRINT
        RET

*  FUNCTION: CONVERTS THE NIBBLE OF RECEIVED HEXADECIMAL CHARACTER TO ASCII

TOASCIH	ANI	11110000B	* CLEAR BOTTOM
	RRC			* ROTATE TO BOTTOM
	RRC
	RRC
	RRC
	JMP	TOASCI
TOASCIL	ANI	00001111B	* CLEAR TOP

TOASCI	ADI	'0'		* MOVE VALUE UP TO ASCII ZERO
	CPI	'9'+1		* JUMP IF NOT NUMERIC
	RC			* DONE IF NUMERIC SO RETURN
	ADI	07H		* OTHERWISE, BUMP UP TO "A"
	CPI	SPACE		* IS CHARACTER LESS THAN A SPACE
	JC	ASCIDOT	        * YES, NON PRINTABLE CONVERT TO DOT
	CPI	'~'
	RC			* ~ OR SMALLER, SO OK TO DISPLAY

ASCIDOT	MVI	A,'.'
	RET			* THEN RETURN

*  FUNCTION: CONVERTS THE ASCII CHARACTER IN REGISTER A INTO HEX

TOHEX	CPI	':'
	JC	TOH05		* JUMP IF INPUT IS ABOVE NUMBERS
	SUI	07H		* THEN REMOVE 9-A GAP
TOH05	SUI	'0'		* SUBTRACT OFF ASCII "0"
	RC			*  IF NEGATIVE, THEN RETURN IN ERROR
	CPI	00FH+1		* IS THE INPUT GREATER THAN 0X0F?
	JNC	TOHERR	        *  NO CARRY, INPUT IS TOO BIG
	CMC			*  YES, INPUT IS OK SO CLEAR CARRY
	RET			*   AND RETURN
TOHERR	STC			* INPUT TOO LARGE SO SET CARRY
	RET			*   AND RETURN
